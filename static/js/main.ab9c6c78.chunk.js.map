{"version":3,"sources":["components/Header.js","components/InputBox.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","InputBox","setTodos","todos","useState","input","setInput","value","onChange","event","target","placeholder","disabled","onClick","preventDefault","newTodo","text","complete","data","slice","push","objDiv","document","getElementById","scrollTop","scrollHeight","Todo","props","isEditable","setIsEditable","setText","element","console","log","key","id","updateTodo","todo","icon","faEdit","e","faCheckCircle","faTrashAlt","TodoList","todoText","todoComplete","splice","map","App","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ab9c6c78.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header() {\n    return (\n        <div>\n            <h1 className=\"p-3 m-5 text-3xl text-white font-bold\">TO-DO LIST</h1>\n        </div>\n    )\n}\n\nexport default Header\n","import React,{useState} from 'react'\nimport '../App.css'\n\nfunction InputBox({setTodos, todos}) {\n\n    const [input, setInput] = useState('')\n\n\n    const addTodo = (event) => {\n        event.preventDefault()\n        let newTodo = {text: input, complete: false}\n        var data = [];\n        if(todos != null){\n          data = todos.slice()\n        }\n        data.push(newTodo)\n        setTodos(data)\n        setInput('')\n        var objDiv = document.getElementById(\"todo-list\");\n        objDiv.scrollTop = objDiv.scrollHeight;\n    \n      }\n\n    return (\n        <div>\n            <div className=\"inp-box flex flex-col\">\n              <form>\n                <input \n                  value={input}\n                  onChange= {event => setInput(event.target.value)}\n                  placeholder=\"write your task here\"\n                  className=\"shadow-xl text-center place-self-center sm:flex-col m-2 w-5/6 rounded-lg p-3  bg-gray-200\"></input>\n                  <button \n                    disabled={!input}\n                    onClick={addTodo} \n                    className=\"inp_btn shadow-xl place-self-center w-5/6 text-white font-bold rounded-lg p-3 mb-12\"\n                >ADD</button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default InputBox\n","import React, {useState} from 'react'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport { faCheckCircle,faTrashAlt, faEdit } from '@fortawesome/free-solid-svg-icons'\n\nfunction Todo(props) {\n    const [selected, setSelected] = useState(false)\n    const [isEditable, setIsEditable] = useState(false)\n    const [text, setText] = useState(\"\")\n\n    let element = \n    <div \n        onClick={() => {\n            console.log('clicked');\n        }}\n        className=\"w-5/6 border mx-auto rounded-md p-3 text-left m-1\">\n        <li\n            key={props.id}\n            className=\"flex text-white justify-between items-center\"\n            >\n            <div className=\"flex-grow\" onClick={() => props.updateTodo(props.id, props.todo.text, true)}>{props.todo.text}</div>\n            <FontAwesomeIcon \n            onClick={() => {\n                setIsEditable(true)\n                setText(props.todo.text)\n                props.updateTodo(props.id, props.todo.text, false)\n                console.log(\"EDITTING\");\n            }}\n            className=\"edit text-xl text-right ml-3 flex-end\" icon={faEdit}\n        ></FontAwesomeIcon></li>\n    </div>\n\n    if(isEditable){\n        element = \n        <div \n            onClick={() => {\n                console.log('clicked');\n            }}\n            className=\"w-5/6 border mx-auto rounded-md p-3 text-left m-1\">\n            <li\n                key={props.id}\n                className=\"flex text-white justify-between items-center\"\n                >\n                \n                <input onChange={(e) => setText(e.target.value)} value={text} className=\"flex-grow p-1 text-black\"/>\n\n                <FontAwesomeIcon \n                onClick={() => {\n                    setIsEditable(false)\n                    props.updateTodo(props.id, text, false)\n                }}\n                className=\"edit text-xl ml-3 text-right flex-end\" icon={faCheckCircle}\n            ></FontAwesomeIcon></li>\n        </div>\n    }\n\n    if(props.todo.complete){\n        element = \n        <div\n        className=\"flex justify-between items-center w-5/6 border mx-auto rounded-md p-3 text-left m-1 bg-green-500\">\n        <FontAwesomeIcon \n            onClick={() => {\n                console.log('clicked');\n                props.updateTodo(props.id, props.todo.text, !props.todo.complete)\n             }}\n            className=\"text-white text-xl\"\n            icon={faCheckCircle}></FontAwesomeIcon>\n        <li\n            onClick={() => {\n                console.log('clicked');\n                props.updateTodo(props.id, props.todo.text, !props.todo.complete)\n            }}\n            key={props.id}\n            className=\"text-white text-left flex-grow mx-4\"\n            >{props.todo.text}\n        </li>\n        <FontAwesomeIcon \n            onClick={() => {\n                console.log('del clicked');\n                props.updateTodo(props.id, null, !props.todo.complete)\n            }}\n            className=\"del text-xl\" icon={faTrashAlt}\n        ></FontAwesomeIcon>\n\n    </div>\n    }\n\n    return (\n        <div>\n             {element}\n        </div>\n    )\n}\n\nexport default Todo\n","import React from 'react'\nimport Todo from './Todo'\n\nfunction TodoList(props) {\n\n    const updateTodo= (id, todoText, todoComplete) => {\n        let data = props.todos.slice()\n\n        if(todoText != null){\n            data[id] = {\n                text: todoText,\n                complete: todoComplete\n            }\n        }else{\n            data.splice(id, 1)\n        }\n        \n        console.log('done');\n        console.log(data);\n        props.setTodos(data)\n    }\n\n    return (\n        <div>\n            <div id=\"todo-list\" className=\"todo_list text-center\">\n            <ul>\n                {\n                    props.todos.map((todo, id) =>\n                        (<Todo key={id} id={id} todo={todo} updateTodo={updateTodo}/>)\n                    )\n                }\n            </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default TodoList\n\n","import React, {useState, useEffect} from 'react';\nimport Header from './components/Header';\nimport InputBox from './components/InputBox';\nimport './tailwind.css';\nimport './App.css'\nimport TodoList from './components/TodoList';\n\n\nfunction App() {\n\n  const [todos, setTodos] = useState([\n    {\n      text: 'sample todo (tap me)',\n      complete: false\n    },\n    {\n      text: 'You can add this as an app on your home screen',\n      complete: true\n    },\n    {\n      text: 'On iOS - tap share > \"Add to Home Screen\"  |  On Android - chrome options on top right > \"Add to Home Screen\"',\n      complete: false\n    }\n  ])\n\n  useEffect(() => {\n    let data = JSON.parse(localStorage.getItem('todos'))\n    if(data != null){\n      setTodos(data)\n    }\n    console.log('todos loaded');\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('todos',JSON.stringify(todos))\n    console.log('todos saved');\n  }, [todos])\n\n  console.log('APPPP',todos);\n  return (\n    <div className=\"text-center\">\n      <Header />\n      <TodoList setTodos={setTodos} todos={todos}/>\n      <InputBox setTodos={setTodos} todos={todos}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}